# -*- coding: utf-8 -*-
"""Untitled32.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vhXtkQUdurOqCw9e6cEkNRKHm5aJfo-3
"""

pip install pandas numpy tensorflow scikit-learn

pip install pandas numpy matplotlib scikit-learn tensorflow

import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import seaborn as sns
import shap

# ----------------------------
# STEP 1: Load Your Dataset
# ----------------------------
# ðŸ”½ Replace this with your actual file path
dataset_path = '/content/T1.csv'  # Example: 'C:/Users/yourname/Documents/scada_data.csv'
data = pd.read_csv(dataset_path)

# Convert 'Date/Time' to datetime format
data['Date/Time'] = pd.to_datetime(data['Date/Time'], format='%d %m %Y %H:%M')

# Set 'Date/Time' as the index (optional for time series analysis)
data.set_index('Date/Time', inplace=True)

# Display loaded columns and first few rows
print("Loaded columns:", data.columns.tolist())
print(data.head())

# ----------------------------
# STEP 2: Select Numerical Features
# ----------------------------
# Select only relevant numerical columns for analysis
feature_cols = [
    'LV ActivePower (kW)',
    'Wind Speed (m/s)',
    'Theoretical_Power_Curve (KWh)',
    'Wind Direction (Â°)'
]

# Ensure no missing values
data = data.dropna(subset=feature_cols)

# Extract features for modeling
features = data[feature_cols]

# ----------------------------
# STEP 3: Feature Scaling
# ----------------------------
scaler = StandardScaler()
scaled_data = scaler.fit_transform(features)

# ----------------------------
# STEP 4: Anomaly Detection (Isolation Forest)
# ----------------------------
model = IsolationForest(n_estimators=100, contamination=0.02, random_state=42)
model.fit(scaled_data)
anomaly_flags = model.predict(scaled_data)
anomaly_raw_score = model.decision_function(scaled_data)

# ----------------------------
# STEP 5: Degradation Trend (Using Power Drop & Wind Speed Variability)
# ----------------------------
data['Power Drop'] = np.gradient(data['LV ActivePower (kW)'])
data['Wind Speed Change'] = np.gradient(data['Wind Speed (m/s)'])

X_degradation = data[['Power Drop', 'Wind Speed Change']]
y_degradation = data['LV ActivePower (kW)']  # Assuming degradation impacts power output

regression_model = LinearRegression()
regression_model.fit(X_degradation, y_degradation)

data['Degradation Score'] = regression_model.predict(X_degradation)

# ----------------------------
# STEP 6: Health Score Calculation
# ----------------------------
data['Anomaly Score'] = 100 * (anomaly_raw_score - np.min(anomaly_raw_score)) / (np.max(anomaly_raw_score) - np.min(anomaly_raw_score))
data['Health Score'] = 100 - data['Anomaly Score'] - 0.3 * (data['Degradation Score'] - np.min(data['Degradation Score']))

# Label anomalies
data['Anomaly'] = np.where(anomaly_flags == -1, 'Yes', 'No')

# ----------------------------
# STEP 7: SHAP Explainability
# ----------------------------
explainer = shap.KernelExplainer(model.decision_function, scaled_data[:100])
shap_values = explainer.shap_values(scaled_data[:100])

# ----------------------------
# STEP 8: Visualizations
# ----------------------------

# Health Score Over Time
plt.figure(figsize=(12, 6))
plt.plot(data.index, data['Health Score'], color='green')
plt.title("Health Score Over Time")
plt.xlabel("Date/Time")
plt.ylabel("Health Score (0-100)")
plt.grid(True)
plt.show()

# Anomaly Detection Scatter Plot
plt.figure(figsize=(10, 6))
plt.scatter(data['Wind Speed (m/s)'], data['LV ActivePower (kW)'],
            c=(data['Anomaly'] == 'Yes'), cmap='coolwarm', label='Anomaly')
plt.title('Anomaly Detection - Power vs Wind Speed')
plt.xlabel('Wind Speed (m/s)')
plt.ylabel('LV ActivePower (kW)')
plt.colorbar(label='Anomaly (Red=True)')
plt.grid(True)
plt.legend()
plt.show()

# Degradation Score Over Time
plt.figure(figsize=(12, 6))
plt.plot(data.index, data['Degradation Score'], color='orange')
plt.title("Degradation Score Over Time")
plt.xlabel("Date/Time")
plt.ylabel("Degradation Score")
plt.grid(True)
plt.show()

# Anomaly Score Distribution
plt.figure(figsize=(10, 5))
sns.histplot(data['Anomaly Score'], bins=30, kde=True, color='red')
plt.title("Distribution of Anomaly Scores")
plt.xlabel("Anomaly Score")
plt.ylabel("Frequency")
plt.grid(True)
plt.show()

# Pairplot of Key Features by Anomaly
sns.pairplot(data.reset_index()[['LV ActivePower (kW)', 'Wind Speed (m/s)',
                                 'Theoretical_Power_Curve (KWh)', 'Health Score', 'Anomaly']],
             hue='Anomaly', palette='Set1')
plt.suptitle('Pair Plot of Key Metrics by Anomaly', y=1.02)
plt.show()

# SHAP Summary Plot
shap.summary_plot(shap_values, scaled_data[:100], feature_names=feature_cols)

# SHAP Beeswarm Plot
shap.plots.beeswarm(shap.Explanation(values=shap_values, data=scaled_data[:100], feature_names=feature_cols))

# ----------------------------
# STEP 9: Save Output
# ----------------------------
output_file = 'wind_turbine_health_scores_with_explainability.csv'
data.to_csv(output_file)
print(f"âœ… Saved health scores and anomalies to: {output_file}")

